import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Select from "react-select";
import api from "../../api";
import AdminSidebar from "../admin/AdminSidebar";
import "../../styles/AdminFormShared.css";
import cicon from '../../assets/icons/cicon.png';

const EvidenceCategoriesPage = () => {
  const navigate = useNavigate();
  const [evidenceTypes, setEvidenceTypes] = useState([]);
  const [keywords, setKeywords] = useState([]);
  const [formData, setFormData] = useState({
    name: "",
    code: "",
    data_type: "file",
    priority: 0,
    auto_fill_field: "",
    keywords: []
  });
  const [errors, setErrors] = useState({});
  const [message, setMessage] = useState("");

  // –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const [isKeywordModalOpen, setIsKeywordModalOpen] = useState(false);
  const [editingKeyword, setEditingKeyword] = useState(null);
  const [editedKeyword, setEditedKeyword] = useState("");

  // –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [resTypes, resKeywords] = await Promise.all([
          api.get("/evidence-types/"),
          api.get("/keywords/")
        ]);
        setEvidenceTypes(Array.isArray(resTypes.data) ? resTypes.data : resTypes.data.results || []);
        setKeywords(Array.isArray(resKeywords.data) ? resKeywords.data : resKeywords.data.results || []);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", err);
        setMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö");
      }
    };
    fetchData();
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∏–Ω–ø—É—Ç–æ–≤
  const handleChange = e => {
    const { name, value } = e.target;
    setFormData(fd => ({ ...fd, [name]: value }));
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const handleKeywordSelect = selectedOptions => {
    setFormData(fd => ({
      ...fd,
      keywords: selectedOptions ? selectedOptions.map(o => o.value) : []
    }));
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleSubmit = async e => {
    e.preventDefault();
    setErrors({});
    setMessage("");
    try {
      await api.post("/evidence-types/", formData);
      setMessage("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞");
      const res = await api.get("/evidence-types/");
      setEvidenceTypes(Array.isArray(res.data) ? res.data : res.data.results || []);
      setFormData({
        name: "",
        code: "",
        data_type: "file",
        priority: 0,
        auto_fill_field: "",
        keywords: []
      });
    } catch (err) {
      if (err.response?.data) {
        setErrors(err.response.data);
      } else {
        console.error(err);
        setMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
      }
    }
  };

  const handleDeleteCategory = async (type) => {
    if (!window.confirm(`–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${type.name}"?`)) return;
    try {
      await api.delete(`/evidence-types/${type.id}/`);
      setEvidenceTypes(prev => prev.filter(t => t.id !== type.id));
      setMessage(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${type.name}" —É–¥–∞–ª–µ–Ω–∞`);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", err);
      setMessage("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é");
    }
  };

  const handleDeleteKeyword = async (keyword) => {
    if (!window.confirm(`–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "${keyword.keyword}"?`)) return;
    try {
      await api.delete(`/keywords/${keyword.id}/`);
      setKeywords(prev => prev.filter(k => k.id !== keyword.id));
      setMessage(`–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "${keyword.keyword}" —É–¥–∞–ª–µ–Ω–æ`);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:", err);
      setMessage("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ");
    }
  };

  // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const openEditKeywordModal = (keyword) => {
    setEditingKeyword(keyword);
    setEditedKeyword(keyword.keyword);
    setIsKeywordModalOpen(true);
  };

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
  const handleSaveEditedKeyword = async () => {
    try {
      await api.patch(`/keywords/${editingKeyword.id}/`, { keyword: editedKeyword });
      setKeywords(prev =>
        prev.map(k => (k.id === editingKeyword.id ? { ...k, keyword: editedKeyword } : k))
      );
      setMessage("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
      setIsKeywordModalOpen(false);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:", err);
      setMessage("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ");
    }
  };

  // –û–ø—Ü–∏–∏ –¥–ª—è select
  const keywordOptions = keywords.map(k => ({
    value: k.id,
    label: k.keyword
  }));

  const selectedKeywordOptions = keywordOptions.filter(opt =>
    formData.keywords.includes(opt.value)
  );

  const renderKeywordNames = ids => {
    if (!Array.isArray(ids) || ids.length === 0) return "-";
    return ids
      .map(id => {
        const kw = keywords.find(k => k.id === id);
        return kw ? kw.keyword : id;
      })
      .join(", ");
  };

  return (
    <div className="admin-page-container">
      <AdminSidebar />
      <div className="content-area">
        <h2 className="text-3xl font-bold text-[#C32939] mb-6">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø—Ä–∞–≤–æ–∫</h2>

        {message && (
          <div className={`message ${Object.keys(errors).length ? "error" : "success"}`}>
            {message}
          </div>
        )}

        <div className="dormitories-table-container">
          <table className="dormitories-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                <th>–ö–æ–¥</th>
                <th>–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö</th>
                <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th>
                <th>–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ</th>
                <th>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {evidenceTypes.map(type => (
                <tr key={type.id}>
                  <td>{type.id}</td>
                  <td>{type.name}</td>
                  <td>{type.code}</td>
                  <td>{type.data_type}</td>
                  <td>{type.priority}</td>
                  <td>{type.auto_fill_field || "-"}</td>
                  <td>{renderKeywordNames(type.keywords)}</td>
                  <td>
                    <button
                      className="operation-icon delete-icon"
                      onClick={() => handleDeleteCategory(type)}
                    >
                      üóëÔ∏è
                    </button>
                    <img
                      src={cicon}
                      alt="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                      className="operation-icon"
                      onClick={() => navigate(`/admin/evidence-types/edit/${type.id}`)}
                    />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="dormitories-table-container" style={{ marginTop: 40 }}>
          <h3 className="text-2xl font-semibold text-gray-800 mb-4">–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</h3>
          <table className="dormitories-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {keywords.map(keyword => (
                <tr key={keyword.id}>
                  <td>{keyword.id}</td>
                  <td>{keyword.keyword}</td>
                  <td>
                    <button
                      className="operation-icon delete-icon"
                      onClick={() => handleDeleteKeyword(keyword)}
                    >
                      üóëÔ∏è
                    </button>
                    <img
                      src={cicon}
                      alt="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                      className="operation-icon"
                      onClick={() => openEditKeywordModal(keyword)}
                    />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="admin-form-container" style={{ marginTop: 40 }}>
          <h3 className="text-xl font-semibold text-gray-800 mb-4">–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</h3>
          <form className="form-container" onSubmit={handleSubmit}>
            <label>
              –ù–∞–∑–≤–∞–Ω–∏–µ:
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                required
              />
              {errors.name && <p className="error-message">{errors.name}</p>}
            </label>

            <label>
              –ö–æ–¥:
              <input
                type="text"
                name="code"
                value={formData.code}
                onChange={handleChange}
                required
              />
              {errors.code && <p className="error-message">{errors.code}</p>}
            </label>

            <label>
              –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:
              <select
                name="data_type"
                value={formData.data_type}
                onChange={handleChange}
                required
              >
                <option value="file">–§–∞–π–ª</option>
                <option value="numeric">–ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</option>
              </select>
            </label>

            <label>
              –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
              <input
                type="number"
                name="priority"
                value={formData.priority}
                onChange={handleChange}
                required
              />
              {errors.priority && <p className="error-message">{errors.priority}</p>}
            </label>

            <label>
              –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ:
              <input
                type="text"
                name="auto_fill_field"
                value={formData.auto_fill_field}
                onChange={handleChange}
              />
            </label>

            <label>
              –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:
              <Select
                options={keywordOptions}
                isMulti
                value={selectedKeywordOptions}
                onChange={handleKeywordSelect}
              />
            </label>

            <button type="submit" className="submit-btn">
              –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            </button>
          </form>
        </div>

        {/* –ú–û–î–ê–õ–ö–ê —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ */}
        {isKeywordModalOpen && (
          <div className="modal-overlay">
            <div className="modal-content">
              <h3 className="text-xl font-bold mb-4">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ</h3>
              <input
                type="text"
                value={editedKeyword}
                onChange={(e) => setEditedKeyword(e.target.value)}
                className="input"
              />
              <div className="modal-actions">
                <button className="submit-btn" onClick={handleSaveEditedKeyword}>
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
                <button className="cancel-btn" onClick={() => setIsKeywordModalOpen(false)}>
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default EvidenceCategoriesPage;